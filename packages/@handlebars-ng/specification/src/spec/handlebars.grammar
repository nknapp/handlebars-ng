@define noStrictParametricProductions true

// @section:Program

Program ::
    ContentStatement
    MustacheStatement
    MustacheStatement[+Unescaped]

// @section:Content

ContentStatement ::
    ContentCharacter ContentStatement?

ContentCharacter ::
    NonMustacheStart
    `\{{`
    `\{{{`

NonMustacheStart ::
    SourceCharacter but not one of MustacheStart or MustacheStart[+Unescaped]

SourceCharacter ::
	> any Unicode code point

// @section:Mustaches

MustacheStatement[Unescaped] ::
    MustacheStart[?Unescaped] MustacheContents MustacheEnd[?Unescaped]

MustacheStart[Unescaped] ::
    [+Unescaped]`{{{`
    [~Unescaped]`{{`

MustacheEnd[Unescaped] ::
    [+Unescaped]`}}}`
    [~Unescaped]`}}`

MustacheContents ::
    WhitespaceControl? Whitespace? PathExpression MustacheParameters? Whitespace? WhitespaceControl?

WhitespaceControl :: `~`

Whitespace :: one of
    `<SPACE>` `<TAB>` `<LF>` `<CR>`

// @section:PathExpressions

PathExpression ::
    Id PathExpressionTail?

PathExpressionTail ::
    `.` PathExpression
    `/` PathExpression

Id ::
    IdCharacter Id?

IdCharacter ::
    SourceCharacter but not one of NonIdCharacter or Whitespace

NonIdCharacter :: one of
    `!` `"` `#` `%` `&` `'` `(` `)` `*` `+` `,` `.` `/` `;` `<` `=` `>` `@` `[` `\` `]` `^` ``` `{` `|` `}` `~`


// @section:HelperParameters

MustacheParameters ::
    Whitespace MustacheParameter MustacheParameters?

// Note: This production is ambiguous: A Literal like `true` or `123` is also a valid
//       PathExpression. In this case, the parser prefers the Literal over
//       the PathExpression.
MustacheParameter ::
    Literal
    PathExpression


// @section:LiteralExpressions

Literal ::
    StringLiteral
    NumberLiteral
    BooleanLiteral

StringLiteral ::
    `"` AnythingExceptDoubleQuote `"`
    `'` AnythingExceptSingleQuote `'`

AnythingExceptDoubleQuote ::
     SourceCharacter but not `"`

AnythingExceptSingleQuote ::
     SourceCharacter but not `'`

NumberLiteral ::
    Minus? Digits Fraction?

Minus ::
    `-`

Digits ::
    Digit Digits

Digit :: one of
    `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

Fraction ::
    `.` Digits

BooleanLiteral :: one of
    `true` `false`

