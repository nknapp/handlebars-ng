// DO NOT EDIT THIS FILE MANUALLY
// generate by scripts/build-testcases.ts

export const handlebarsSpec = {
  "01-introduction/example.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A basic example with one mustache",
    template: "Hello {{something}}",
    input: { something: "world" },
    output: "Hello world",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "Hello ",
          original: "Hello ",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 6 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "something",
            data: false,
            depth: 0,
            parts: ["something"],
            loc: {
              start: { line: 1, column: 8 },
              end: { line: 1, column: 17 },
            },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 6 }, end: { line: 1, column: 19 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 19 } },
    },
  },
  "02-abstract-syntax-tree/empty.hb-spec.json": {
    $schema: "../schema/testcase.json",
    description: "An empty template yields an empty result",
    type: "success",
    template: "",
    ast: {
      type: "Program",
      body: [],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 1 } },
    },
    input: {},
    output: "",
    originalAst: { type: "Program", body: [], strip: {} },
  },
  "02-abstract-syntax-tree/newline-around-mustache.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "Newlines around a mustache statement",
    template: "\n{{a}}\n",
    input: { a: 2 },
    output: "\n2\n",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "\n",
          original: "\n",
          loc: { start: { line: 1, column: 0 }, end: { line: 2, column: 0 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "a",
            data: false,
            depth: 0,
            parts: ["a"],
            loc: { start: { line: 2, column: 2 }, end: { line: 2, column: 3 } },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 2, column: 0 }, end: { line: 2, column: 5 } },
        },
        {
          type: "ContentStatement",
          value: "\n",
          original: "\n",
          loc: { start: { line: 2, column: 5 }, end: { line: 3, column: 0 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 3, column: 0 } },
    },
  },
  "02-abstract-syntax-tree/newline.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A single newline",
    template: "\n",
    output: "\n",
    input: {},
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "\n",
          original: "\n",
          loc: { start: { line: 1, column: 0 }, end: { line: 2, column: 0 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 2, column: 0 } },
    },
  },
  "04-content-statement/content.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A simple template without mustaches",
    template: "hello\nworld",
    input: {},
    output: "hello\nworld",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "hello\nworld",
          original: "hello\nworld",
          loc: { start: { line: 1, column: 0 }, end: { line: 2, column: 5 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 2, column: 5 } },
    },
  },
  "04-content-statement/escaped-content.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "Escaped mustache expression",
    template: "\\{{abc}} \\{{{cde}}}",
    input: {},
    output: "{{abc}} {{{cde}}}",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "{{abc}} {{{cde}}}",
          original: "\\{{abc}} \\{{{cde}}}",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 19 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 19 } },
    },
    originalAst: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "{{abc}} {{{cde}}}",
          original: "{{abc}} {{{cde}}}",
          loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 19 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 19 } },
    },
  },
  "05-mustache-statement/html-escaped-mustache.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A simple mustache with html-escaped output",
    template: "{{ value }}",
    input: { value: "abc & < > \" ' ` = 123" },
    output: "abc &amp; &lt; &gt; &quot; &#x27; &#x60; &#x3D; 123",
    ast: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "value",
            data: false,
            depth: 0,
            parts: ["value"],
            loc: { start: { line: 1, column: 3 }, end: { line: 1, column: 8 } },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 11 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 11 } },
    },
  },
  "05-mustache-statement/unescaped-mustache.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A simple mustache with unescaped output",
    template: "{{{ value }}}",
    input: { value: "abc & < > \" ' ` = 123" },
    output: "abc & < > \" ' ` = 123",
    ast: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "value",
            data: false,
            depth: 0,
            parts: ["value"],
            loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 9 } },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 13 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 13 } },
    },
  },
  "05-mustache-statement/white-space-control-empty-nodes.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "ContentStatements that become empty due to white-space control, are preserved.",
    template: " {{~name~}} {{~name~}}",
    input: { name: "joe" },
    output: "joejoe",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "",
          original: " ",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 1 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 8 } },
          },
          strip: { open: true, close: true },
          loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 11 } },
        },
        {
          type: "ContentStatement",
          value: "",
          original: " ",
          loc: { start: { line: 1, column: 11 }, end: { line: 1, column: 12 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 15 },
              end: { line: 1, column: 19 },
            },
          },
          strip: { open: true, close: true },
          loc: { start: { line: 1, column: 12 }, end: { line: 1, column: 22 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 22 } },
    },
  },
  "05-mustache-statement/white-space-control-escaped.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "White space should be removed when control characters are in place",
    template: "|- {{~name}} | {{name~}} -|- {{~name~}} -|",
    input: { name: "joe" },
    output: "|-joe | joe-|-joe-|",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "|-",
          original: "|- ",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 3 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 6 },
              end: { line: 1, column: 10 },
            },
          },
          strip: { open: true, close: false },
          loc: { start: { line: 1, column: 3 }, end: { line: 1, column: 12 } },
        },
        {
          type: "ContentStatement",
          value: " | ",
          original: " | ",
          loc: { start: { line: 1, column: 12 }, end: { line: 1, column: 15 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 17 },
              end: { line: 1, column: 21 },
            },
          },
          strip: { open: false, close: true },
          loc: { start: { line: 1, column: 15 }, end: { line: 1, column: 24 } },
        },
        {
          type: "ContentStatement",
          value: "-|-",
          original: " -|- ",
          loc: { start: { line: 1, column: 24 }, end: { line: 1, column: 29 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 32 },
              end: { line: 1, column: 36 },
            },
          },
          strip: { open: true, close: true },
          loc: { start: { line: 1, column: 29 }, end: { line: 1, column: 39 } },
        },
        {
          type: "ContentStatement",
          value: "-|",
          original: " -|",
          loc: { start: { line: 1, column: 39 }, end: { line: 1, column: 42 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 42 } },
    },
  },
  "05-mustache-statement/white-space-control-unescaped.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "White space should be removed when control characters are in place",
    template: "|- {{{~name}}} | {{{name~}}} -|- {{{~name~}}} -|",
    input: { name: "joe" },
    output: "|-joe | joe-|-joe-|",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "|-",
          original: "|- ",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 3 } },
        },
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 7 },
              end: { line: 1, column: 11 },
            },
          },
          strip: { open: true, close: false },
          loc: { start: { line: 1, column: 3 }, end: { line: 1, column: 14 } },
        },
        {
          type: "ContentStatement",
          value: " | ",
          original: " | ",
          loc: { start: { line: 1, column: 14 }, end: { line: 1, column: 17 } },
        },
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 20 },
              end: { line: 1, column: 24 },
            },
          },
          strip: { open: false, close: true },
          loc: { start: { line: 1, column: 17 }, end: { line: 1, column: 28 } },
        },
        {
          type: "ContentStatement",
          value: "-|-",
          original: " -|- ",
          loc: { start: { line: 1, column: 28 }, end: { line: 1, column: 33 } },
        },
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: {
              start: { line: 1, column: 37 },
              end: { line: 1, column: 41 },
            },
          },
          strip: { open: true, close: true },
          loc: { start: { line: 1, column: 33 }, end: { line: 1, column: 45 } },
        },
        {
          type: "ContentStatement",
          value: "-|",
          original: " -|",
          loc: { start: { line: 1, column: 45 }, end: { line: 1, column: 48 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 48 } },
    },
    originalParseError: true,
  },
  "05-mustache-statement/white-space-ignored-escaped.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "White space around path expressions is ignored (escaped mustache)",
    template:
      "|- {{~  \t\nname  \t\n}} | {{  \t\nname  \t\n~}} -|- {{~  \t\nname  \t\n~}} -|",
    input: { name: "joe" },
    output: "|-joe | joe-|-joe-|",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "|-",
          original: "|- ",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 3 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 2, column: 0 }, end: { line: 2, column: 4 } },
          },
          strip: { open: true, close: false },
          loc: { start: { line: 1, column: 3 }, end: { line: 3, column: 2 } },
        },
        {
          type: "ContentStatement",
          value: " | ",
          original: " | ",
          loc: { start: { line: 3, column: 2 }, end: { line: 3, column: 5 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 4, column: 0 }, end: { line: 4, column: 4 } },
          },
          strip: { open: false, close: true },
          loc: { start: { line: 3, column: 5 }, end: { line: 5, column: 3 } },
        },
        {
          type: "ContentStatement",
          value: "-|-",
          original: " -|- ",
          loc: { start: { line: 5, column: 3 }, end: { line: 5, column: 8 } },
        },
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 6, column: 0 }, end: { line: 6, column: 4 } },
          },
          strip: { open: true, close: true },
          loc: { start: { line: 5, column: 8 }, end: { line: 7, column: 3 } },
        },
        {
          type: "ContentStatement",
          value: "-|",
          original: " -|",
          loc: { start: { line: 7, column: 3 }, end: { line: 7, column: 6 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 7, column: 6 } },
    },
  },
  "05-mustache-statement/white-space-ignored-unescaped.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "White space around path expressions is ignored (unescaped mustache)",
    template:
      "|- {{{~  \t\nname  \t\n}}} | {{{  \t\nname  \t\n~}}} -|- {{{~  \t\nname\t\n  ~}}} -|",
    input: { name: "joe" },
    output: "|-joe | joe-|-joe-|",
    ast: {
      type: "Program",
      body: [
        {
          type: "ContentStatement",
          value: "|-",
          original: "|- ",
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 3 } },
        },
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 2, column: 0 }, end: { line: 2, column: 4 } },
          },
          strip: { open: true, close: false },
          loc: { start: { line: 1, column: 3 }, end: { line: 3, column: 3 } },
        },
        {
          type: "ContentStatement",
          value: " | ",
          original: " | ",
          loc: { start: { line: 3, column: 3 }, end: { line: 3, column: 6 } },
        },
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 4, column: 0 }, end: { line: 4, column: 4 } },
          },
          strip: { open: false, close: true },
          loc: { start: { line: 3, column: 6 }, end: { line: 5, column: 4 } },
        },
        {
          type: "ContentStatement",
          value: "-|-",
          original: " -|- ",
          loc: { start: { line: 5, column: 4 }, end: { line: 5, column: 9 } },
        },
        {
          type: "MustacheStatement",
          escaped: false,
          params: [],
          path: {
            type: "PathExpression",
            original: "name",
            data: false,
            depth: 0,
            parts: ["name"],
            loc: { start: { line: 6, column: 0 }, end: { line: 6, column: 4 } },
          },
          strip: { open: true, close: true },
          loc: { start: { line: 5, column: 9 }, end: { line: 7, column: 6 } },
        },
        {
          type: "ContentStatement",
          value: "-|",
          original: " -|",
          loc: { start: { line: 7, column: 6 }, end: { line: 7, column: 9 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 7, column: 9 } },
    },
    originalParseError: true,
  },
  "06-path-expression/id-in-square-brackets.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "An id with special characters can be wrapped in square brackets",
    template: "{{['].[ ].[0]}}",
    input: { "'": { " ": ["success"] } },
    output: "success",
    ast: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "['].[ ].[0]",
            data: false,
            depth: 0,
            parts: ["'", " ", "0"],
            loc: {
              start: { line: 1, column: 2 },
              end: { line: 1, column: 13 },
            },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
    },
    originalAst: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "'. .0",
            data: false,
            depth: 0,
            parts: ["'", " ", "0"],
            loc: {
              start: { line: 1, column: 2 },
              end: { line: 1, column: 13 },
            },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
    },
  },
  "06-path-expression/path-expression-dots.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A path expressions with parts seperated by dots",
    template: "{{person.name}}",
    input: { person: { name: "Max" } },
    output: "Max",
    ast: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "person.name",
            data: false,
            depth: 0,
            parts: ["person", "name"],
            loc: {
              start: { line: 1, column: 2 },
              end: { line: 1, column: 13 },
            },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
    },
  },
  "06-path-expression/path-expression-resolves-to-nothing.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description:
      "A path expressions that is resolved to nothing yields an empty string",
    template: "{{person.name}}",
    input: { person: "Max" },
    ast: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "person.name",
            data: false,
            depth: 0,
            parts: ["person", "name"],
            loc: {
              start: { line: 1, column: 2 },
              end: { line: 1, column: 13 },
            },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
    },
    output: "",
  },
  "06-path-expression/path-expression-too-long.hb-spec.json": {
    $schema: "../schema/testcase.json",
    type: "success",
    description: "A path expression resolved on 'null' returns an empty string",
    template: "{{person.name}}",
    input: {},
    ast: {
      type: "Program",
      body: [
        {
          type: "MustacheStatement",
          escaped: true,
          params: [],
          path: {
            type: "PathExpression",
            original: "person.name",
            data: false,
            depth: 0,
            parts: ["person", "name"],
            loc: {
              start: { line: 1, column: 2 },
              end: { line: 1, column: 13 },
            },
          },
          strip: { open: false, close: false },
          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
        },
      ],
      strip: {},
      loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } },
    },
    output: "",
  },
};

export default handlebarsSpec;
